{
     "algorithm": "\nPropose an algorithm that selects the next node based on a combination of the nearest unvisited node in terms of Euclidean distance and the node with the maximum number of connections to unvisited nodes, aiming to balance between short-term and long-term optimization; \n1. Calculate the Euclidean distance from the current node to each unvisited node.\n2. Determine the nearest unvisited node `nearest_node`.\n3. Calculate the total connections from each unvisited node to other unvisited nodes.\n4. Determine the unvisited node with the maximum connections, breaking ties by choosing the closest to the current node as the next node `next_node`.\n",
     "code": "import numpy as np\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    distances = np.sqrt(np.sum((distance_matrix[unvisited_nodes] - distance_matrix[current_node])**2, axis=1))\n    nearest_node = unvisited_nodes[np.argmin(distances)]\n    \n    connections = np.sum(distance_matrix[unvisited_nodes][:, unvisited_nodes] > 0, axis=1)\n    max_connections_node = unvisited_nodes[np.argmax(connections)]\n    \n    if nearest_node == max_connections_node:\n        next_node = nearest_node\n    else:\n        next_node = min(nearest_node, max_connections_node)\n    \n    return next_node",
     "objective": 6.59703,
     "other_inf": null
}